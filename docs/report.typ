#set page(margin: 2.5cm)
#set text(lang: "ru", font: "Times New Roman", size: 14pt)
#set page(numbering: none)
#set heading(numbering: "1.")

#align(center,  [
  #block[
    Федеральное государственное автономное образовательное учреждение высшего образования
    «Национальный исследовательский университет ИТМО»

    Факультет Программной Инженерии и Компьютерной Техники \
    Дисциплина: "Информационные Системы"
  ]

  #v(48mm)

  #block[
    #text(size: 16pt)[*Отчет*] 

    По лабораторной работе №1 \
    Вариант 11134
  ]

  #v(0.6fr)

  #grid(
    columns: (2fr, 3fr),
    column-gutter: 1cm,

      [],
      [
        #align(right, [
        *Преподаватель:* \
        Тюрин Иван Николаевич \
        #v(2mm)
        *Выполнил:* \
        Нестеров Владислав Алексеевич \
        #v(2mm)
        *Группа:* P3310
      ])
      ]

  )

  #v(10mm)

  Санкт-Петербург\
  2025

])

#pagebreak()

#set page(numbering: "1")

= Текст задания
 Реализовать информационную систему, которая позволяет взаимодействовать с объектами класса `StudyGroup`, описание которого приведено ниже: \
```Java
public class StudyGroup {
    private Integer id; //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    private String name; //Поле не может быть null, Строка не может быть пустой
    private Coordinates coordinates; //Поле не может быть null
    private java.time.LocalDate creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    private int studentsCount; //Значение поля должно быть больше 0
    private long expelledStudents; //Значение поля должно быть больше 0
    private int transferredStudents; //Значение поля должно быть больше 0
    private FormOfEducation formOfEducation; //Поле может быть null
    private Integer shouldBeExpelled; //Значение поля должно быть больше 0, Поле не может быть null
    private double averageMark; //Значение поля должно быть больше 0
    private Semester semesterEnum; //Поле не может быть null
    private Person groupAdmin; //Поле не может быть null
}
public class Coordinates {
    private double x;
    private Integer y; //Максимальное значение поля: 498, Поле не может быть null
}
public class Person {
    private String name; //Поле не может быть null, Строка не может быть пустой
    private Color eyeColor; //Поле не может быть null
    private Color hairColor; //Поле не может быть null
    private Location location; //Поле не может быть null
    private String passportID; //Длина строки должна быть не меньше 4, Поле может быть null
    private Country nationality; //Поле может быть null
}
public class Location {
    private float x;
    private Long y; //Поле не может быть null
    private float z;
}
public enum FormOfEducation {
    DISTANCE_EDUCATION,
    FULL_TIME_EDUCATION,
    EVENING_CLASSES;
}
public enum Semester {
    SECOND,
    SIXTH,
    SEVENTH,
    EIGHTH;
}
public enum Color {
    BLACK,
    BLUE,
    WHITE,
    BROWN;
}
public enum Country {
    USA,
    FRANCE,
    ITALY,
    JAPAN;
}
```

Разработанная система должна удовлетворять следующим требованиям:\
- Основное назначение информационной системы — управление объектами, созданными на основе заданного в варианте класса.\
- Необходимо, чтобы с помощью системы можно было выполнить следующие операции с объектами: создание нового объекта, получение информации об объекте по ИД, обновление объекта (модификация его атрибутов), удаление объекта. Операции должны осуществляться в отдельных окнах (интерфейсах) приложения. При получении информации об объекте класса должна также выводиться информация о связанных с ним объектах.\
- При создании объекта класса необходимо дать пользователю возможность связать новый объект с объектами вспомогательных классов, которые могут быть связаны с созданным объектом и уже есть в системе.\
- Выполнение операций по управлению объектами должно осуществляться на серверной части (не на клиенте), изменения должны синхронизироваться с базой данных.\
- На главном экране системы должен выводиться список текущих объектов в виде таблицы (каждый атрибут объекта — отдельная колонка в таблице). При отображении таблицы должна использоваться пагинация (если все объекты не помещаются на одном экране).\
- Нужно обеспечить возможность фильтровать/сортировать строки таблицы, которые показывают объекты (по значениям любой из строковых колонок). Фильтрация элементов должна производиться по неполному совпадению.\
- Переход к обновлению (модификации) объекта должен быть возможен из таблицы с общим списком объектов и из области с визуализацией объекта (при её реализации).\
- При добавлении/удалении/изменении объекта он должен автоматически появляться/исчезать/изменяться в интерфейсах у других пользователей, авторизованных в системе.\
- Если при удалении объекта с ним связан другой объект, связанные объекты должны удаляться.\
- Пользователи должны иметь возможность просмотра всех объектов. Для модификации объекта должно открываться отдельное диалоговое окно. При вводе некорректных значений в поля объекта должны появляться информативные сообщения о соответствующих ошибках.

В системе должен быть реализован отдельный пользовательский интерфейс для выполнения специальных операций над объектами:\
- Удалить все объекты, значение поля `groupAdmin` которого эквивалентно заданному.\
- Вернуть массив объектов, значение поля `name` которых содержит заданную подстроку.\
- Вернуть массив уникальных значений поля `groupAdmin` по всем объектам.\
- Отчислить всех студентов указанной группы.\
- Переместить всех студентов из одной группы в другую (группы указываются пользователем).\
- Представленные операции должны быть реализованы в качестве функций БД, которые необходимо вызывать из уровня бизнес-логики приложения.

Особенности хранения объектов, которые должны быть реализованы в системе:\
- Организовать хранение данных об объектах в реляционной СУБД (PostgreSQL). Каждый объект, с которым работает ИС, должен быть сохранён в базе данных.\
- Все требования к полям класса (указанные в виде комментариев к описанию классов) должны быть выполнены на уровне ORM и БД.\
- Для генерации поля `id` использовать средства базы данных.\
- Для подключения к БД на кафедральном сервере использовать хост `pg`, имя базы данных — `studs`, имя пользователя/пароль совпадают с таковыми для подключения к серверу.

При создании системы нужно учитывать следующие особенности организации взаимодействия с пользователем:\
- Система должна реагировать на некорректный пользовательский ввод, ограничивая ввод недопустимых значений и информируя пользователей о причине ошибки.\
- Переходы между различными логически обособленными частями системы должны осуществляться с помощью меню.\
- При добавлении/удалении/изменении объекта он должен автоматически появляться/исчезать/изменяться на области у всех других клиентов.

При разработке ИС должны учитываться следующие требования:\
- В качестве основы для реализации ИС необходимо использовать Spring MVC.\
- Для создания уровня хранения необходимо использовать JPA + Hibernate.\
- Разные уровни приложения должны быть отделены друг от друга, а разные логические части ИС — находиться в отдельных компонентах.


= UML-диаграммы классов и пакетов разработанного приложения

#figure(
  image("uml.png", width: 130%)
)

#figure(
  image("packages.png", width: 100%)
)

#pagebreak()

= Ссылка на репозиторий с исходным кодом
GitHub: https://github.com/urasha/information-systems-lab-1

= Вывод
В ходе лабораторной работы были изучены и применены следующие технологии:\
- Spring MVC\
- Spring Data.\

В процессе выполнения работы удалось реализовать следующие задачи:\
- Повторил и применил на практике основные методы HTTP-запросов\
- Настроил хранение объектов в базе данных с использованием ORM\
- Реализовал взаимодействие с объектами через HTTP-запросы

